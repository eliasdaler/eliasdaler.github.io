<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Elias Daler's blog</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2017-02-18T13:44:28+03:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>Making and storing references to game objects (entities) in C++ and Lua</title>
   <link href="http://localhost:4000/game-object-references"/>
   <updated>2017-01-22T14:00:00+03:00</updated>
   <id>http://localhost:4000/entityreferences</id>
   <content type="html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#shared_ptr-and-weak_ptr&quot;&gt;shared_ptr and weak_ptr&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#using-unique-ids&quot;&gt;Using unique ids&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#storing-references-to-entities-in-lua&quot;&gt;Storing references to entities in Lua&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ids.png&quot; alt=&quot;Ids&quot; style=&quot;display:block; margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The problem of handling references to game objects (I’ll call them &lt;em&gt;entities&lt;/em&gt;) comes up very often. Sometimes it’s child-parent relationship between the entities, sometimes it’s useful to store a reference to an object in event data, some task scheduling class and so on.&lt;/p&gt;

&lt;p&gt;Sometimes a simple pointer, reference or &lt;code class=&quot;highlighter-rouge&quot;&gt;std::reference_wrapper&lt;/code&gt; is enough. But the problem with raw pointers and references is that once you use them, you have to make sure that the entity which is being referenced stays alive and is not moved in memory without notifying objects which hold references. And with good design you’ll probably be able to achieve that.&lt;/p&gt;

&lt;p&gt;But stale pointers/references give some of the worst bugs, which are difficult to track, crash your game and may not be easily identifiable. Some entities may start to occupy different addresses in memory (for example, after you reload a level and decide to create all entities from scratch). While it’s possible to manually update all pointers to previously referenced entities, it’s certainly will be better to do so automatically and without a chance of forgetting some pointers which will be stale.&lt;/p&gt;

&lt;p&gt;Let’s see all these problems can be solved. The latest solution (about storing references to Lua) was discovered by me not long ago and it is the point of me writing the article, but I want to show some other ways of solving the problem. Let’s start!&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;&lt;a class=&quot;anchor&quot; id=&quot;read-more&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;shared_ptr-and-weak_ptr&quot;&gt;shared_ptr and weak_ptr&lt;/h1&gt;

&lt;p&gt;Some of the problems with raw references can be solved with &lt;code class=&quot;highlighter-rouge&quot;&gt;std::shared_ptr&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;std::weak_ptr&lt;/code&gt;. First, you create your entities as with &lt;code class=&quot;highlighter-rouge&quot;&gt;std::make_shared&lt;/code&gt;. After that you’ll create all references to it with &lt;code class=&quot;highlighter-rouge&quot;&gt;std::weak_ptr&lt;/code&gt;s which won’t affect your entity’s lifetime. After that you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;std::weak_ptr&amp;lt;T&amp;gt;::expired&lt;/code&gt; function to check if the reference is still valid.&lt;/p&gt;

&lt;p&gt;The solution is not perfect. First of all, it requires you to create all your entities as &lt;code class=&quot;highlighter-rouge&quot;&gt;shared_ptr&lt;/code&gt;s which may have some significant overhead compared to &lt;code class=&quot;highlighter-rouge&quot;&gt;unique_ptr&lt;/code&gt;s. And after all, it’s better for the lifetime of entities not to be shared and that semantic is better expressed with &lt;code class=&quot;highlighter-rouge&quot;&gt;unique_ptr&lt;/code&gt;. Shared pointers also don’t solve the problem of moving entities in memory: you can’t swap what’s inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;shared_ptr&lt;/code&gt; and have all &lt;code class=&quot;highlighter-rouge&quot;&gt;weak_ptr&lt;/code&gt;s automatically update their pointers.&lt;/p&gt;

&lt;h1 id=&quot;using-unique-ids&quot;&gt;Using unique ids&lt;/h1&gt;

&lt;p&gt;One solution to the problem is just creating unique ids for entities and storing those ids instead of raw pointers or references. There a lots of ways to generate and represent entity ids. Ids can just be integers with &lt;code class=&quot;highlighter-rouge&quot;&gt;EntityManager&lt;/code&gt; having a counter which will be incremented as new entities are created: the first entity will get id=0, the second one id=1 and so on. Another way to generate ids is to use some hashing algorithm or &lt;a href=&quot;https://en.wikipedia.org/wiki/Universally_unique_identifier&quot;&gt;UUID&lt;/a&gt;s. No matter what, your ids should stay unique, unless you add some additional info (like entity creation time or some tags) to your id.&lt;/p&gt;

&lt;p&gt;Here’s how your &lt;code class=&quot;highlighter-rouge&quot;&gt;EntityManager&lt;/code&gt; class may look:&lt;/p&gt;
&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;EntityManager&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;:&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberFunction - identifier - (TRANSIENT)&quot;&gt;getEntity&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;EntityId&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppParameter - identifier - (TRANSIENT)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberFunction - identifier - (TRANSIENT)&quot;&gt;entityExists&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;EntityId&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppParameter - identifier - (TRANSIENT)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;comment&quot;&gt;//&amp;nbsp;...&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;:&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;cppNamespace - identifier - (TRANSIENT)&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;unordered_map&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;EntityId&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppNamespace - identifier - (TRANSIENT)&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;unique_ptr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;entities&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;comment&quot;&gt;//&amp;nbsp;...&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;};&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Using ids also helps with recreation problem: you can easily reload/recreate the entity and just assign the same id to it as before. It will have a different adress in memory, but the next time someone calls &lt;code class=&quot;highlighter-rouge&quot;&gt;getEntity&lt;/code&gt; the updated entity is returned. You can also easily send these ids over the network or save them in your save files.&lt;/p&gt;

&lt;p&gt;Your code when using entity id becomes something like this:&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppLocalVariable&quot;&gt;entityPtr&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppGlobalVariable&quot;&gt;g_EntityManager&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;getEntity&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;entityId&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cppLocalVariable&quot;&gt;entityPtr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Of course this creates some overhead because you now have a layer of indirection: you have to search &lt;code class=&quot;highlighter-rouge&quot;&gt;unordered_map&lt;/code&gt; inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;EntityManager&lt;/code&gt; to get the raw reference to the entity, but if you don’t do it too often (and you most likely won’t), you’ll be fine!&lt;/p&gt;

&lt;p&gt;There’s another improvement which can be done: you can wrap your id inside the struct and then overload &lt;code class=&quot;highlighter-rouge&quot;&gt;operator-&amp;gt;&lt;/code&gt; for handle to act like a raw pointer:&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;EntityHandle&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;EntityId&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;EntityManager&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;entityManager&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;cppMemberFunction - identifier - (TRANSIENT)&quot;&gt;EntityHandle&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;EntityId&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppParameter - identifier - (TRANSIENT)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;EntityManager&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppParameter - identifier - (TRANSIENT)&quot;&gt;entityManager&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;:&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppParameter - identifier - (TRANSIENT)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;),&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;entityManager&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppParameter - identifier - (TRANSIENT)&quot;&gt;entityManager&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;{}&lt;/span&gt;
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberOperator - keyword - (TRANSIENT)&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;cppMemberOperator - operator - (TRANSIENT)&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;()&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberFunction - identifier - (TRANSIENT)&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberFunction - identifier - (TRANSIENT)&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;()&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;cppMacro - identifier - (TRANSIENT)&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;entityManager&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;entityExists&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;));&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;entityManager&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;cppMemberFunction - identifier - (TRANSIENT)&quot;&gt;getEntity&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;};&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Now you can do things like this:&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;cppType&quot;&gt;EntityHandle&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppLocalVariable&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;someEntityId&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;cppGlobalVariable&quot;&gt;g_EntityManager&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cppLocalVariable&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;cppMemberOperator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt;
 
&lt;span class=&quot;comment&quot;&gt;//&amp;nbsp;or...&lt;/span&gt;
 
&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppLocalVariable&quot;&gt;entityPtr&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppLocalVariable&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;cppLocalVariable&quot;&gt;entityPtr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Notice that we also get some error checking with assert which checks validity of the reference.
Great! Now let’s see how we can reference entities in Lua scripts.&lt;/p&gt;

&lt;h1 id=&quot;storing-references-to-entities-in-lua&quot;&gt;Storing references to entities in Lua&lt;/h1&gt;

&lt;p class=&quot;message&quot;&gt;Full implementation can be found here: &lt;i class=&quot;fa fa-github&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;a href=&quot;https://gist.github.com/eliasdaler/f5c2ee50fc7e42bf3ee18ad7d46d18f8&quot;&gt;C++ part&lt;/a&gt;, &lt;i class=&quot;fa fa-github&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;a href=&quot;https://gist.github.com/eliasdaler/f3516d3deabc32b465a7c244ff082cf0&quot;&gt;Lua part&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First of all, it’s obvious that you can use the same approach in Lua. Your handle can just be a number or a table with &lt;code class=&quot;highlighter-rouge&quot;&gt;__index&lt;/code&gt; meta-method so that you can use your handle as if it was the raw reference. But there’s a neater method I recently came up with. Let’s see how it works.&lt;/p&gt;

&lt;p&gt;First of all, our handles will be tables with raw C++ references stored in them as userdata. They’ll also have a bool named &lt;code class=&quot;highlighter-rouge&quot;&gt;isValid&lt;/code&gt; which will help us test if the handle is still valid. We’ll also have a global table of references in Lua, so that you can easily get handle from any place without calling C++. What’s neat is that you’ll get &lt;strong&gt;references&lt;/strong&gt; to your handles, not a copy. It’s great, because you can easily compare two handles or even use them as table keys. You also don’t waste your memory, but that’s not a big concern as our handles are very light.&lt;/p&gt;

&lt;p&gt;If you want to remove and recreate some entity, you’ll just have to notify the main Lua handle which will be stored inside some global Lua table. And because all your handles in Lua will be references to original handle you won’t have to care about them: once you update the main handle, it’s updated everywhere.&lt;/p&gt;

&lt;p&gt;Another good thing is that once the entity is removed, we can just set &lt;code class=&quot;highlighter-rouge&quot;&gt;isValid&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; and raw reference to &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; just to be extra safe.&lt;/p&gt;

&lt;p&gt;Let’s get to implementation! We’ll use &lt;i class=&quot;fa fa-github&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;a href=&quot;https://github.com/ThePhD/sol2&quot;&gt;sol2&lt;/a&gt; as our Lua/C++ binding library. Let’s write a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;Entity&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;EntityManager&lt;/code&gt; classes for testing:&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;EntityId&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;Entity&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;:&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberFunction - identifier - (TRANSIENT)&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;EntityId&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppParameter - identifier - (TRANSIENT)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;:&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;),&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppParameter - identifier - (TRANSIENT)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;{}&lt;/span&gt;
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppNamespace - identifier - (TRANSIENT)&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberFunction - identifier - (TRANSIENT)&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;()&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberFunction - identifier - (TRANSIENT)&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppNamespace - identifier - (TRANSIENT)&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppParameter - identifier - (TRANSIENT)&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;name&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberOperator - operator - (TRANSIENT)&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppParameter - identifier - (TRANSIENT)&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;EntityId&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberFunction - identifier - (TRANSIENT)&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;()&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;:&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;cppNamespace - identifier - (TRANSIENT)&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;string&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;EntityId&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;};&lt;/span&gt;
 
&lt;span class=&quot;cppNamespace - identifier - (TRANSIENT)&quot;&gt;sol&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;state&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppGlobalVariable - identifier - (TRANSIENT)&quot;&gt;lua&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;comment&quot;&gt;//&amp;nbsp;globals&amp;nbsp;are&amp;nbsp;bad,&amp;nbsp;but&amp;nbsp;we&amp;#39;ll&amp;nbsp;use&amp;nbsp;it&amp;nbsp;for&amp;nbsp;simpler&amp;nbsp;implementation&lt;/span&gt;
 
&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;EntityManager&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;:&lt;/span&gt;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;cppMemberFunction - identifier - (TRANSIENT)&quot;&gt;EntityManager&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;()&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;:&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;idCounter&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;{}&lt;/span&gt;
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberFunction - identifier - (TRANSIENT)&quot;&gt;createEntity&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;()&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppLocalVariable - identifier - (TRANSIENT)&quot;&gt;id&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;idCounter&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;idCounter&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppLocalVariable - identifier - (TRANSIENT)&quot;&gt;inserted&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;entities&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction - identifier - (TRANSIENT)&quot;&gt;emplace&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable - identifier - (TRANSIENT)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppNamespace - identifier - (TRANSIENT)&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction - identifier - (TRANSIENT)&quot;&gt;make_unique&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable - identifier - (TRANSIENT)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;));&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppLocalVariable - identifier - (TRANSIENT)&quot;&gt;it&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppLocalVariable - identifier - (TRANSIENT)&quot;&gt;inserted&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;comment&quot;&gt;//&amp;nbsp;iterator&amp;nbsp;to&amp;nbsp;created&amp;nbsp;id/Entity&amp;nbsp;pair&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppLocalVariable - identifier - (TRANSIENT)&quot;&gt;e&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberOperator - operator - (TRANSIENT)&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;cppLocalVariable - identifier - (TRANSIENT)&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;cppMemberOperator - operator - (TRANSIENT)&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;comment&quot;&gt;//&amp;nbsp;created&amp;nbsp;entity&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;cppGlobalVariable - identifier - (TRANSIENT)&quot;&gt;lua&lt;/span&gt;&lt;span class=&quot;cppMemberOperator - operator - (TRANSIENT)&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;createHandle&amp;quot;&lt;/span&gt;&lt;span class=&quot;cppMemberOperator - operator - (TRANSIENT)&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;cppLocalVariable - identifier - (TRANSIENT)&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;cppMemberOperator - operator - (TRANSIENT)&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppLocalVariable - identifier - (TRANSIENT)&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberFunction - identifier - (TRANSIENT)&quot;&gt;removeEntity&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;EntityId&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppParameter - identifier - (TRANSIENT)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;cppGlobalVariable - identifier - (TRANSIENT)&quot;&gt;lua&lt;/span&gt;&lt;span class=&quot;cppMemberOperator - operator - (TRANSIENT)&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;onEntityRemoved&amp;quot;&lt;/span&gt;&lt;span class=&quot;cppMemberOperator - operator - (TRANSIENT)&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;cppParameter - identifier - (TRANSIENT)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;cppMemberOperator - operator - (TRANSIENT)&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;entities&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction - identifier - (TRANSIENT)&quot;&gt;erase&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppParameter - identifier - (TRANSIENT)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;:&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;cppNamespace - identifier - (TRANSIENT)&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;unordered_map&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;EntityId&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppNamespace - identifier - (TRANSIENT)&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;unique_ptr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;entities&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;cppType - identifier - (TRANSIENT)&quot;&gt;EntityId&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;cppMemberField - identifier - (TRANSIENT)&quot;&gt;idCounter&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;};&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Here’s how we will create our handle in Lua:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cppRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cppRef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cppRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;isValid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;setmetatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Handles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cppRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Handles&lt;/code&gt; global table stores all handles so that we can easily get them later. As you can see, we still use integer ids for it as a tables key so that when we remove an entity, we can easily find its handle and modify it appropriately.&lt;/p&gt;

&lt;p&gt;The metatable has an important function: it will let us use the handle as if it was the original reference. Here’s how it’s written:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isValid&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;debug.traceback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Error: handle is not valid!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cppRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Just a quick reminder: metatable’s &lt;code class=&quot;highlighter-rouge&quot;&gt;__index&lt;/code&gt; function gets called when the key in the table is not found and the table (our handle) and missing key are passed.&lt;/p&gt;

&lt;p&gt;Here’s an example of how it all works. When we do this:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Lua checks if handle table has “setName” key, but it doesn’t, so it calls metatable’s &lt;code class=&quot;highlighter-rouge&quot;&gt;__index&lt;/code&gt; function with handle and “John” as parameters. The wrapper around &lt;code class=&quot;highlighter-rouge&quot;&gt;Entity&lt;/code&gt;’s member function is returned and it gets called. The function which gets returned is a closure which calls the &lt;code class=&quot;highlighter-rouge&quot;&gt;Entity&lt;/code&gt;’s class member function on original raw reference. Why can’t we just return &lt;code class=&quot;highlighter-rouge&quot;&gt;Entity[key]&lt;/code&gt;? The problem with that is that our handle will get passed into it while the function expects raw reference to be passed (&lt;code class=&quot;highlighter-rouge&quot;&gt;cppRef:setName(&quot;John&quot;)&lt;/code&gt; is the same as calling &lt;code class=&quot;highlighter-rouge&quot;&gt;Entity.setName(cppRef, &quot;John&quot;)&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The error checking that we have here is extremely important and useful! It allows us to easily debug problems with our code: we even print the call stack to find the place where our code crashed!&lt;/p&gt;
&lt;p class=&quot;message&quot;&gt;
Notice that we pass &quot;2&quot; as the second argument in `error` function. It tells it that the problem is not the function which called it, the bad one was below it in a call stack.
&lt;/p&gt;

&lt;p&gt;Another great thing about this implementation is that it lets us handle error on Lua side, not C++ side. Once the C++ function is called from Lua, it’s hard to properly throw and catch an error from C++. You’ll have to compile Lua as C++ to do it without a crash. Throwing the error before calling C++ allows us to safely catch it on Lua side and handle it appropriately. We’ll see how it can be done a bit later.&lt;/p&gt;

&lt;p&gt;Let’s test out reference first:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cppRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cppRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello, my name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Mark&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;My name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; now!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre style=&quot;background-color:black;color:white&quot;&gt;Hello, my name is John
My name is Mark now!&lt;/pre&gt;

&lt;p&gt;It works! What should we do when entity gets removed? Let’s create a function for that:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onEntityRemoved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cppRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cppRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cppRef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isValid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Handles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cppRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We need to call it before our entity gets removed and you can place it into &lt;code class=&quot;highlighter-rouge&quot;&gt;Entity&lt;/code&gt;’s destructor or into &lt;code class=&quot;highlighter-rouge&quot;&gt;EntityManager&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;removeEntity&lt;/code&gt; function. Note, that this doesn’t remove the handle itself: someone may still be referencing it, but setting corresponding value in &lt;code class=&quot;highlighter-rouge&quot;&gt;Handles&lt;/code&gt; table to &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; is still useful because if someone tries to grab a handle later, &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; will be returned. What’s more important is that &lt;code class=&quot;highlighter-rouge&quot;&gt;isValid&lt;/code&gt; is set to false so that the next time someone tries to use the handle, the error will be raised.&lt;/p&gt;

&lt;p&gt;Now let’s see what happens when we try to use invalid reference. We can even do our error handling in Lua now!&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testBadReference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- this handle exists and is okay&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isValid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- but suppose that entity was removed!&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pcall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; 
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When we call this function from C++ we don’t get a crash which would have been caused by using stale reference. Instead, we get a helpful error message and call stack:&lt;/p&gt;
&lt;pre style=&quot;background-color:black;color:white&quot;&gt;stack traceback:
    script.lua:23: in function 'getName'
    script.lua:57: in function &amp;lt;script.lua:56&amp;gt;
    [C]: in function 'pcall'
    script.lua:65: in function &amp;lt;script.lua:62&amp;gt;
script.lua:57: Error: handle is not valid!&lt;/pre&gt;

&lt;p&gt;What about the performance? My tests show that it’s around &lt;strong&gt;600 nanoseconds&lt;/strong&gt; per C++ member function call. It’s not that bad, but still may be not good enough for some people. In that case it’s easy to get a raw reference and then use it without any additional overhead of error checking:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawRef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cppRef&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Raw reference used. Name: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can also speed up &lt;code class=&quot;highlighter-rouge&quot;&gt;__index&lt;/code&gt; function. I’ve found that its biggest overhead is creating a closure every time… so let’s memoize our wrapper functions! First of all, we’ll create a table which will store our wrapper functions:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memoizedFuncs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then we change our &lt;code class=&quot;highlighter-rouge&quot;&gt;__index&lt;/code&gt; method to this:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isValid&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;debug.traceback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Error: handle is not valid!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memoizedFuncs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cppRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;memoizedFuncs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The closure for each function will be created once and then will get reused. This speeds up things considerably! The overhead is roughly &lt;strong&gt;200 nanoseconds&lt;/strong&gt; per call.&lt;/p&gt;

&lt;p&gt;What else? Calling the function through &lt;code class=&quot;highlighter-rouge&quot;&gt;__index&lt;/code&gt; produces additional overhead too. Suppose that we use &lt;code class=&quot;highlighter-rouge&quot;&gt;getName&lt;/code&gt; function very often and want it to be part of our handle table so that it’s called directly. Ok, let’s do this!&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cppRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cppRef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cppRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;isValid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cppRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;setmetatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Handles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cppRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Wait a second… what happens when we call getName on bad handle? There’s no error checking! Let’s fix that:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getWrappedSafeFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isValid&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;debug.traceback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Error: handle is not valid!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cppRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and then in createHandle we’ll write:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getWrappedSafeFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now the overhead is just &lt;strong&gt;70 nanoseconds&lt;/strong&gt;. The only added overhead is additional function call, validity check and retrieval of raw reference from handle table, but I think it’s pretty small for gained benefits.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In this article I’ve shown how to use different approaches to solving the “dangling pointer” problem and how to add additional safety layer to Lua scripts with very small overhead. Are there any awesome solutions that I’ve missed? Feel free to share them in comments.&lt;/p&gt;

&lt;p&gt;Hope you’ve enjoyed this article. Thanks for reading!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>2016</title>
   <link href="http://localhost:4000/2016"/>
   <updated>2017-01-08T23:10:58+03:00</updated>
   <id>http://localhost:4000/twoohseventeen</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/rrQWIM4.jpg&quot; alt=&quot;Animation editor&quot; style=&quot;display:block; margin: 0 auto;&quot; /&gt;
2016 was pretty good for me. There were a lot of positive changes, I learned a lot and got some unexpected recognition for my work!&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;&lt;a class=&quot;anchor&quot; id=&quot;read-more&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;finishing-bs-and-starting-ms&quot;&gt;Finishing BS and starting MS&lt;/h1&gt;
&lt;p&gt;First of all, I finally finished my bachelor’s degree! I got it in &lt;strong&gt;MEPhI&lt;/strong&gt;, it’s in applied mathematics and informatics. Neat. Last few months of the spring were devoted to finishing my bachelor’s thesis and I’m quite proud of it.&lt;/p&gt;

&lt;p&gt;The thesis project I made there was a bit too ambitious, but came out good enough. Sadly, there wasn’t enough guidance and requirements shifted from time to time, but it was interesting to create pretty big software project which wasn’t a game (it was a simulation modeling system written in C++, it used Lua for process scripting) . It was eye-opening experience in some ways and I’ve learned a lot about architectures which are not used as much in game development.&lt;/p&gt;

&lt;p&gt;After that I’ve started to prepare for exams to enter Master’s degree study in &lt;strong&gt;HSE&lt;/strong&gt; (Higher School of Economics). I spent a lot of time doing that this summer and even stopped making my game for some time. This paid off, as I (and my girlfriend as well) passed the exams successfully!&lt;/p&gt;

&lt;p&gt;HSE is pretty nice and I like it a lot more than MEPhI. It looks like people in HSE got a lot of things right and I’m quite surprised from time to time to see how much they care and how much they want to teach and help students learn stuff. The studying process in organized quite nicely. During the module (3 months) I need to do some homework and maybe some bigger projects. This keeps the knowledge fresh and applied, this makes it quite easy to prepare for exams.&lt;/p&gt;

&lt;h1 id=&quot;personal-achievements&quot;&gt;Personal achievements&lt;/h1&gt;

&lt;p&gt;I’ve started to approach drawing a lot more seriously and spend more time doing it. I still can’t find enough time to draw, so I hope that it’ll improve in 2017. I want to draw at least 1 hour per day and I believe it’ll improve my artistic ability a lot! I’m already seeing some very nice improvements and I hope that I’ll share some art this year.&lt;/p&gt;

&lt;p&gt;I also started exercising a lot more in 2016. I really like the bodyweight fitness program, check it out here.&lt;/p&gt;

&lt;p&gt;There were 1-2 week breaks here and there, but still, I managed to achieve and improve quite a lot! There are a lot of benefits to that. Being fit and healthy is an obvious ones, but it also improved my discipline and determination in other areas of life.&lt;/p&gt;

&lt;h1 id=&quot;game-dev-and-programming&quot;&gt;Game dev and programming&lt;/h1&gt;

&lt;p&gt;2016 was quite nice for my game as well. I didn’t do as much about the game as I wanted to, but I improved the engine and project structure a lot and I believe that I’m incredibly close to being almost completely happy with it. I plan to write a blog post about it, so I won’t talk much about it here.&lt;/p&gt;

&lt;p&gt;I’ve also learned quite a lot about assembly, how compilers work and what assembly the generate. I did this by reading this awesome book: &lt;a href=&quot;https://www.amazon.com/Computer-Systems-Programmers-Perspective-2nd/dp/0136108040&quot;&gt;Computer Systems: A Programmer’s Perspective&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was also interviewed on &lt;a href=&quot;http://cppcast.com/2016/07/elias-daler/&quot;&gt;CppCast&lt;/a&gt;! You can find some info and my thoughts on it &lt;a href=&quot;https://eliasdaler.github.io/cppcast&quot;&gt;here&lt;/a&gt;, but I want to say it again: I’m very happy and honored about that. There’s still a lot of stuff I want to do in C++, but already being recognized is very awesome.&lt;/p&gt;

&lt;p&gt;I’ve also started working on &lt;i class=&quot;fa fa-github&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;a href=&quot;https://github.com/eliasdaler/imgui-sfml&quot;&gt;my ImGui-SFML binding&lt;/a&gt; and it become somewhat popular, probably because of articles I wrote (&lt;a href=&quot;https://eliasdaler.github.io/using-imgui-with-sfml-pt1&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://eliasdaler.github.io/using-imgui-with-sfml-pt2&quot;&gt;2&lt;/a&gt;) which gained quite an attention too! (And of course, ImGui is so awesome, it helped a lot as well). It was my first non-personal project which was used by other people and was the best in what it did.&lt;/p&gt;

&lt;p&gt;I also started to work on &lt;i class=&quot;fa fa-github&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;a href=&quot;https://github.com/eliasdaler/MetaStuff&quot;&gt;my serialization/introspection system named MetaStuff&lt;/a&gt;. I decided to release it on GitHub because I’m quite proud about it! It wasn’t easy to came up with the ideas behind it and I’m surprised that I was able to achieve such functionality. 
Basically, it’s a library which allows you to register classes and then serialize/deserialize them using user specified formats (e.g. JSON, Lua table) and you can use this meta info for other things, like dynamically created GUIs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/A44zLlb.gif&quot; alt=&quot;Animation editor&quot; style=&quot;display:block; margin: 0 auto;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;Animation editor in my game which uses Animation class meta info to create GUI&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;I’ve also discovered &lt;i class=&quot;fa fa-github&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;a href=&quot;https://github.com/ThePhD/sol2&quot;&gt;sol2&lt;/a&gt; this year and it’s the best Lua/C++ binding ever. I’m now using it in all my projects with Lua/C++ integration. I’ve also helped make this lib better by finding bugs and suggesting interface and functionality improvements. The repository maintainer/sol2 creator, &lt;a href=&quot;https://twitter.com/thephantomderp&quot;&gt;ThePhD&lt;/a&gt;, is awesome guy and working with him is very nice!&lt;/p&gt;

&lt;p&gt;And now look around. You’re on my new blog! I’ve learned how to create a blog with Jekyll and I also learned some HTML and CSS to make it more pretty and awesome. I spent some time finding the best way to highlight code on my blog and even wrote &lt;a href=&quot;https://eliasdaler.github.io/better-highlighting&quot;&gt;an article&lt;/a&gt; about it. I read a book about typography to learn how to present text beautifully. Some long hours with CSS and here I am! The blog is still not perfect, but I’m very happy about it and like how it looks.&lt;/p&gt;

&lt;p&gt;I don’t want to sound too braggy, but I also got attention from people from some big and awesome companies. Well, it’s not direct job offers, but they suggested me to take interview and try to apply for a job. It’s quite nice to get noticed like that! In part it’s because of my twitter and blog, but my GitHub started to get me some attention as well. I hope that this continues and improves in the future!&lt;/p&gt;

&lt;h1 id=&quot;new-laptop-and-better-workspace&quot;&gt;New laptop and better workspace&lt;/h1&gt;

&lt;p&gt;I finally got a new laptop! My old one was slowing me down a lot. It made my life a lot worse. So much waiting, so much time being wasted. I couldn’t achieve flow because of how slow it was. But this new laptop is so amazing. It’s a lot faster and more convenient that my old one. I’m already amazed by how much quicker I can make stuff done!&lt;/p&gt;

&lt;p&gt;I also bought myself a table, because the one I got in a new dorm is incredibly small and made my life harder. Here’s how my workspace looks now. I’m able to access all the stuff very quickly and combined with new laptop, my work process improved a lot. Don’t ignore things which are bothering you while you work, improvements in your workplace can greatly increase your productivity.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/ztXbfu4.png&quot; alt=&quot;My workspace&quot; style=&quot;display:block; margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;future-plans&quot;&gt;Future plans&lt;/h1&gt;

&lt;p&gt;First of all, I want to become a lot more productive, but that’s the thing which almost everyone wants. But I really mean it, because I have a lot of things to do as you’ll see below.&lt;/p&gt;

&lt;p&gt;I want to write more articles on my blog: an article about modern C++ and stuff which I enjoy about it the most, article about MetaStuff lib, etc.&lt;/p&gt;

&lt;p&gt;And of course, Lua/C++ articles… I promised to start working on new series in autumn, but sadly failed to achieve this goal. That’s partly because I was incredibly busy with all that studying, my game and GitHub projects. But it’s also because my view on Lua/C++ integration changed quite a lot. We’ll see how it goes, maybe I’ll be able to write them in 2017! And maybe I’ll just write some articles about Lua programming (without C++), because I write it a lot more now, and I started to really love its simplicity and awesomeness, so I want to write about things I find.&lt;/p&gt;

&lt;p&gt;As for &lt;strong&gt;Re:creation&lt;/strong&gt;… I’ll stop working on it for quite some time, but I’ll start working on a smaller game because I finally want to finish something and &lt;strong&gt;Re:creation&lt;/strong&gt; will take years to finish. I’m still 100% interested in completing it, so don’t be afraid about it’s future.&lt;/p&gt;

&lt;p&gt;The new project will probably be announced in a few months, but here are some details: I’ll be working with an artist and a composer. A team of three people, whoo-hoo! This will speed things up a lot. I’ll also use &lt;strong&gt;Re:creation&lt;/strong&gt;’s engine, because it became so generic that I can do other games with it. The game will not be an action-rpg but it’ll be related to &lt;strong&gt;Re:creation&lt;/strong&gt; and will tell a story very related to some part of it. I have high hopes for the project, let’s see how it goes!&lt;/p&gt;

&lt;p&gt;I want to improve my drawing more. I just have to find at least an hour a day for it. Combine this with reading some books about art and practice, and that’s all it takes.&lt;/p&gt;

&lt;p&gt;I also want to spend my free time better. For example, reduce time spent watching stupid memes or cute animals. To do that, I’ll need some nice websites/blogs to read regularly. Please, recommend some, if you have some interesting ones in mind.&lt;/p&gt;

&lt;p&gt;I also plan to finally learn some new algorithms and data structures because that’s what will help me find a job. I already know quite a lot of stuff, but feel like structuring my knowledge and filling the gaps will help me a lot!&lt;/p&gt;

&lt;p&gt;I will also start working on a project for my master’s dissertation. It’s quite interesting and I’ll probably write about it in the future! In short, I’ll be writing multiplayer related stuff for FPS in VR. Game dev combined with studying, what could be better!&lt;/p&gt;

&lt;p&gt;Discipline and planning are things I need the most this year to achieve it all, yeah. I’ll see how it goes!&lt;/p&gt;

&lt;h1 id=&quot;books-music-games&quot;&gt;Books, music, games.&lt;/h1&gt;

&lt;h2 id=&quot;books&quot;&gt;Books&lt;/h2&gt;
&lt;p&gt;I’ve read &lt;a href=&quot;https://www.goodreads.com/user/year_in_books/2016/9045801&quot;&gt;quite a lot of books&lt;/a&gt; this year!
That’s not everything I’ve read, of course. I’ve re-read some programming books, especially Game Engine Architecture and Game Programming Patterns which I like a lot.&lt;/p&gt;

&lt;p&gt;I can’t highlight any single book, but I can recommend all of them (well, except the one I gave one star…). Maybe you’ll find a book which will interest you!&lt;/p&gt;

&lt;h2 id=&quot;music&quot;&gt;Music&lt;/h2&gt;
&lt;p&gt;As for the music. Three awesome albums came out this year which I enjoyed a lot: &lt;strong&gt;Radiohead&lt;/strong&gt;’s &lt;strong&gt;Moon Shaped Pool&lt;/strong&gt;, &lt;strong&gt;Weezer&lt;/strong&gt;’s &lt;strong&gt;White Album&lt;/strong&gt; and &lt;strong&gt;Shugo Tokumaru&lt;/strong&gt;’s &lt;strong&gt;TOSS&lt;/strong&gt;. I also fell in love with Boards of Canada. They’re incredible.&lt;/p&gt;

&lt;p&gt;I also found my new favorite band this year, it’s called Lamp and it’s incredibly good, just listen!&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/playlists/129575793&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;I went to &lt;strong&gt;Animals as Leaders&lt;/strong&gt; and &lt;strong&gt;Boris&lt;/strong&gt; concerts and it was so awesome! Now I love these bands even more, seeing them live was incredible.&lt;/p&gt;

&lt;h2 id=&quot;games&quot;&gt;Games&lt;/h2&gt;
&lt;p&gt;I finished &lt;strong&gt;Mother 3&lt;/strong&gt;! It’s the best game I’ve ever played. If you’ve never played it, do it now. Trust me, it’s incredible. The gameplay is awesome, the characters and plot are incredible, there are so many things happening, you never feel bored. Its soundtrack is amazing too and I’ve been listening to it a lot.&lt;/p&gt;

&lt;p&gt;Another game which I enjoyed a lot this year is &lt;strong&gt;Shadow of The Colossus&lt;/strong&gt;. I’m close to completing it, but I feel like it’s going to become on of my most favorite games. Its atmosphere, gameplay and music are just on some another level.&lt;/p&gt;

&lt;p&gt;And hey, I got a new PC and it finally allowed me to play some games I couldn’t play before. I still want to play a lot of stuff that I’ve missed, but with a lot of plans this won’t happen much!&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;So, as you can see, my year was pretty full of new experiences and improvements in my life. I hope that 2017 will be another great year for me! Thanks for reading, hope you had a good year as well and that the next one will be even better.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Re:creation dev log. July - November 2016</title>
   <link href="http://localhost:4000/re-creation-devlog-july-november2016"/>
   <updated>2016-11-27T21:39:58+03:00</updated>
   <id>http://localhost:4000/re-creation-devlog-july-november2016</id>
   <content type="html">&lt;p&gt;The last five months were really important for the game. It finally feels like I can work on the game itself now, not just the engine and basic systems which will let me implement different stuff in the game. It’s not just abstract stuff, stuff which I do “just in case”. No, I try to be pragmatic and implement things which are needed for the game and which will let me create stuff without much restrictions.&lt;/p&gt;

&lt;p&gt;I’m very glad to say this, but I feel like the core engine is almost done. There are still some important things which I’ll have to implement, but it still feels like I’m finally happy with the design I have. Mostly, it’s because I’ve removed lots of stuff and find lots of ways to minimize my code which in the end gives me ability to implement new stuff easier and makes the whole thing easier to expand, modify and debug.&lt;/p&gt;

&lt;p&gt;I’m finally ready to do a lot of prototyping. I’ve already done a lot of stuff about the game, but I still have the feeling that it’s just the beginning of the “real” development! And it feels great, because I feel like I’m in total control of every aspect of the game. There are no restrictions, no boundaries. Let’s see how it goes.&lt;/p&gt;

&lt;p&gt;One more small thing: I’ve got a new laptop! I’ve had it for two weeks now. It feels really great. I’m able to do stuff a lot quicker and without frustration (having a great mood is important to be productive)! I’ve had my previous laptop for six years and it was slowing me down a lot. It was constantly overheating, everything was running poorly, compilation took a long time, etc… And recently I’ve realized how much it hurt my working process. There were lots of distractions, because even small change could take 1-2 minutes of recompilation. This means, that fast iteration was impossible. This also means that I constantly lost flow and couldn’t debug quickly. Hours of slow progress made it all exhausting. Won’t happen anymore!&lt;/p&gt;

&lt;p&gt;Okay, let’s begin!&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;&lt;a class=&quot;anchor&quot; id=&quot;read-more&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;art&quot;&gt;Art&lt;/h1&gt;
&lt;p&gt;I haven’t done much art in the last months and most of the stuff I’ve done is still not finished, so I’ll show them a bit later. There’s a next graphics improvement coming and I’m glad that I didn’t have a lot of graphics done, because I’d have to redraw tons of stuff. Let’s hope it will be the last huge change!&lt;/p&gt;

&lt;p&gt;I’ve improved Renatus’ design and walking animation, it’s nice to see how much my art improved over time:
&lt;img src=&quot;http://i.imgur.com/bCdBa80.gif&quot; alt=&quot;Re:creation walk cycle improvements&quot; style=&quot;display:block; margin: 0 auto;width:512px;height: auto;&quot; /&gt;
I’ve also made some very small, but cool things…
Unsynched idle animations make everything look more alive!
&lt;img src=&quot;http://i.imgur.com/36HyuEh.gif&quot; alt=&quot;Unsynched animations&quot; style=&quot;display:block; margin: 0 auto;&quot; /&gt;
Cat doesn’t “talk” during “translation”
&lt;img src=&quot;http://i.imgur.com/dKRkCKn.gif&quot; alt=&quot;Cat talking&quot; style=&quot;display:block; margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;multiple-tilemaps-in-one-level&quot;&gt;Multiple tilemaps in one level&lt;/h1&gt;

&lt;p&gt;Previously the level was limited to one tile map. That meant that if I wanted to make indoor places I either had to switch to another level (which isn’t fast!) or place the indoor area somewhere far away and teleport the player there. The second approach is highly used in 3d games, but I’ve realized that it wasn’t as good in 2d tile-based games because it’s harder to move tiles and you have to account for empty areas in your tilemap which are created by placing some area far away.&lt;/p&gt;

&lt;p&gt;Eventually, I’ve made a decision to make levels which support multiple tilemaps. It wasn’t easy to make, because lots of assumptions were made about Level having only one tilemap, but fortunately it wasn’t that bad, so I’ve done it fairly quickly. Now I can easily switch tilemaps during the fade in / fade out effect during scene transitions.&lt;/p&gt;

&lt;h1 id=&quot;input&quot;&gt;Input&lt;/h1&gt;
&lt;p&gt;Previously I’ve used polling for input, but realized that events are a lot more efficient and let me easily move all the input in Lua! One more part of game logic moved from C++ to Lua again! Great.&lt;/p&gt;

&lt;p&gt;I’ve also made much better system for input in general. Now all keys can be mapped to “actions” or “axes” (plural of “axis”, not “axe”!). “Actions” and “Axes” can be binded to C++ or Lua callback. This makes low-level input decoupled from game input logic in a nice way.&lt;/p&gt;

&lt;p&gt;One advantage of event based scripting is being able to set only one callback for particular action at given time. For example, during dialogues the “Primary Action” input action will be assigned to “Skip dialogue”, not “Attack/Use Primary Item”, so I don’t have to worry that somehow the player will be able to attack during dialogues.&lt;/p&gt;

&lt;p&gt;My input manager now also has complete gamepad support (sticks and triggers are also supported and it’s possible to connect gamepad in-game!). Event based input will later make it easy to implement replay system which will just send input events at needed times, simulating real player pressing buttons. Easy to implement and very useful for debugging!&lt;/p&gt;

&lt;h1 id=&quot;moved-entity-states-from-c-to-lua&quot;&gt;Moved Entity states from C++ to Lua&lt;/h1&gt;

&lt;p&gt;This is a thing that I wanted to make for a long time. Basically, most of the game logic lives in entity states. State like &lt;code class=&quot;highlighter-rouge&quot;&gt;MoveState&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;AttackState&lt;/code&gt;, etc. Previously they were hard-coded in C++ which made them hard to modify and control with Lua. Another problem was that the more stuff I added to Lua, the harder it became for me to access stuff one Lua side.&lt;/p&gt;

&lt;p&gt;For example, once I’ve implemented Action Lists in Lua, I’ve realized that some entity states can highly benefit from using them. But this meant that a lot of calls between Lua and C++ would happen.&lt;/p&gt;

&lt;p&gt;Rewriting entity states was extremely easy and I’ve discovered and fixed a lot of bugs along the way. I’ve also made entity states a lot more reusable, so that different entities can use the same code while adding bits that are different. For example, the same AttackState is used by player character, enemies with melee weapons and archers!&lt;/p&gt;

&lt;p&gt;Action lists are used to make code much easier to follow, basically the lists goes like this:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Pre-attack animation (starting to swing a sword / aiming the arrow)&lt;/li&gt;
  &lt;li&gt;Attack animation (continuing to swing a sword / shooting the arrow)
During this step the damage is created during some frame. For melee attackers it’s defined in their AttackComponent, for archer the damage is “arrow” entity which is created on the first frame of “shoot” animation&lt;/li&gt;
  &lt;li&gt;Post attack animation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve also implemented multiple state machines for entities. Most of the time the entity will have only one state machine which will describe it’s “main” state, but sometimes it’s useful to have another state machine which will, for example, describe it’s health state, so that if the entity has low health, it will play different “idle” animation.&lt;/p&gt;

&lt;h1 id=&quot;private-messages-in-event-system&quot;&gt;Private messages in event system&lt;/h1&gt;

&lt;p&gt;I’ve effectively used event system with global queue for quite some time, but then I’ve realized that it’s not efficient for some events to be implemented that way. One example of this is collision callbacks. When two entities collide, each entity’s onCollide function needs to be called with some additional info about which entity collided with it and maybe how it happened. In global queue each entity interested in collision event would receive this event and it would have to check if the collision happened with it or not. Of course that’s a huge waste of time, so that’s why I’ve made “private message” system which let’s entities specify sender and receiver for each event and then EventManager just sends this event to receiver object.&lt;/p&gt;

&lt;h1 id=&quot;improved-dialogues-a-lot&quot;&gt;Improved dialogues a lot&lt;/h1&gt;

&lt;p&gt;Dialogue system got some needed improvements! One such improvement is ability to insert delays and even function calls between words! It looks like this in a text:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;SOME_TEXT_TAG&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello...[DELAY 500][X] I've been waiting for you&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[DELAY 500]&lt;/code&gt; creates a 500 ms delay. &lt;code class=&quot;highlighter-rouge&quot;&gt;[X]&lt;/code&gt; indicates that the function with tag “X” will be called. In scripts, it looks something like this:&lt;/p&gt;
&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;DialogueAction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SOME_TEXT_TAG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;functions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;talker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;talker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;smile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I later plan to add shaking or wave effects to text for better expression of characters’ emotions.&lt;/p&gt;

&lt;h1 id=&quot;dev-tools&quot;&gt;Dev tools&lt;/h1&gt;

&lt;p&gt;I’ve made some useful in-game dev tools with ImGui. One such tool is in-game console which lets me execute Lua easily. Here’s a little demo of it in action!
&lt;img src=&quot;http://i.imgur.com/DdKtJqU.gif&quot; alt=&quot;Console demo&quot; style=&quot;display:block; margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve also made a tool for controlling time. Now it’s possible to slow down and pause the game at any moment. The game doesn’t slow down or stop, I just change deltaTime, so I can easily debug everything in Visual Studio.
&lt;img src=&quot;http://i.imgur.com/R2F7YLf.gif&quot; alt=&quot;Time dev tools&quot; style=&quot;display:block; margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;removed-tons-of-components&quot;&gt;Removed tons of components&lt;/h1&gt;
&lt;p&gt;I’ve also removed a lot of components which I found redundant and easily made with other components which have much larger role. Here’s what I’ve removed.&lt;/p&gt;

&lt;h2 id=&quot;direction-component&quot;&gt;Direction Component&lt;/h2&gt;
&lt;p&gt;Direction component stored just one thing: entity’s direction. But that meant that to access entity’s direction I had to get DirectionComponent and then get the direction. Getting component from entity isn’t very fast (because it involves a &lt;code class=&quot;highlighter-rouge&quot;&gt;dynamic_cast&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;std::unordered_map&lt;/code&gt; search) so I’ve just started to store entity’s direction in Entity class. Yes, some entities won’t have a direction (invisible entities or trees, for example), but I just assign &lt;code class=&quot;highlighter-rouge&quot;&gt;Direction::None&lt;/code&gt; to them. Storing 1 additional byte inside of Entity isn’t a big deal!&lt;/p&gt;

&lt;h2 id=&quot;trigger-component&quot;&gt;Trigger Component&lt;/h2&gt;

&lt;p&gt;I’ve also removed trigger component. Previously it was used for triggers and made possible to realize the following callbacks: &lt;code class=&quot;highlighter-rouge&quot;&gt;onEnter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;onStay&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;onExit&lt;/code&gt;. But how did I check when to call them? I checked if trigger collides with potentially interesting entities or not… but then I’ve realized: why not just use &lt;code class=&quot;highlighter-rouge&quot;&gt;CollisionComponent&lt;/code&gt; for that and make a simple entity state machine which will track entities state which are: Idle or Triggered. OnEnter is called on transition from Idle to Triggered state, onStay is called when Triggered state is active and onExit is called during transition from Triggered to Idle state. &lt;code class=&quot;highlighter-rouge&quot;&gt;CollisionEnter&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CollisionExit&lt;/code&gt; events trigger state transitions. This means that TriggerComponent wasn’t needed anymore and I got rid of it with a huge satisfaction.&lt;/p&gt;

&lt;p&gt;I’ve also made “directed” triggers which are called only when the player faces the specific direction, for example cafe has a trigger which lets player exit it when his direction is “Down”.&lt;/p&gt;

&lt;h2 id=&quot;interaction-component&quot;&gt;Interaction Component&lt;/h2&gt;

&lt;p&gt;Interaction Component was used for player-entity interactions, for example speaking with NPCs. When the player enters the “interaction area”, the input changes and pressing a specific button will start dialogue. Hmmm… seems familiar, isn’t it? Yes, this component isn’t needed too, because I can just make a trigger which will just change the input during onEnter/onExit function calls. Using it with “directed” triggers makes it perfect, because now it’s easy to make interaction possible only when the player faces the entity. (Previously it was possible to talk with NPCs while turning away from them, not cool!)&lt;/p&gt;

&lt;h1 id=&quot;remade-damage-system&quot;&gt;Remade damage system&lt;/h1&gt;

&lt;p&gt;Previously when player attacked, the “damage” entity was created and then destroyed. If something collided with it, the damage was registered. But on one random forum I’ve found much better solution: just have “damage” rect with melee attackers all the time and activate it only during attack. Simple and much more efficient!&lt;/p&gt;

&lt;h1 id=&quot;sat-separating-axis-theorem-collision&quot;&gt;SAT (Separating Axis Theorem) collision&lt;/h1&gt;

&lt;p&gt;After a lot of trying and failing, I’ve implemented SAT collision detection and response which will be used for some complex level geometry. 
&lt;img src=&quot;http://i.imgur.com/eEg9lEp.gif&quot; alt=&quot;SAT&quot; style=&quot;display:block; margin: 0 auto;&quot; /&gt;
I’ve put some source code of &lt;i class=&quot;fa fa-github&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;a href=&quot;https://gist.github.com/eliasdaler/502b54fcf1b515bcc50360ce874e81bc&quot;&gt;here&lt;/a&gt;, by the way, feel free to use it for your projects.&lt;/p&gt;

&lt;h1 id=&quot;refactoring&quot;&gt;Refactoring&lt;/h1&gt;
&lt;p&gt;I’ve also done &lt;strong&gt;a lot&lt;/strong&gt; of refactoring. I’m mostly satisfied with most of my codebase, but there was some bad stuff that I needed to fix once and for all!
Mostly, I’ve been fixing pretty typical problems: unnecessary dependencies, some code duplication, problems with ownerships, etc. Not too much to say about that! 
But the good thing about refactoring is that it just made my codebase a lot shorter. At some point it’s not a refactoring anymore, it’s restructuring, implementing better code, moving some stuff to Lua, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C++&lt;/strong&gt;: -4345 lines of code&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lua&lt;/strong&gt;: +540 lines of code&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Total&lt;/strong&gt;: -3814 lines of code&lt;/p&gt;

&lt;p&gt;This makes me extremely happy, because shorter and cleaner code is much easier to manage and improve. Writing negative code feels great!&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;The last few months were very important and productive! While there wasn’t a huge progress about the game itself, the engine is almost done, I’m very happy with the code and engine structure now. The next few months will be spent prototyping and making “vertical slice” of the game and I hope I’ll be able to make game truly fun and enjoyable. See ya!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Using ImGui with modern C++ and STL for creating awesome game dev tools. Part 2. Some tips and tricks.</title>
   <link href="http://localhost:4000/using-imgui-with-sfml-pt2"/>
   <updated>2016-07-21T20:34:00+03:00</updated>
   <id>http://localhost:4000/imgui-sfml-pt2</id>
   <content type="html">&lt;p&gt;Hello, welcome to my second article about ImGui! This article is a collection of useful things, hacks and other stuff I’ve found while using ImGui. Mostly it’s focused on using modern C++ and some parts of STL with ImGui.&lt;/p&gt;

&lt;p class=&quot;message&quot;&gt;If you use SFML and want to learn how to use it with ImGui, use &lt;i class=&quot;fa fa-github&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;a href=&quot;https://github.com/eliasdaler/imgui-sfml&quot;&gt;my binding&lt;/a&gt; and refer to &lt;a href=&quot;https://eliasdaler.github.io/using-imgui-with-sfml-pt1&quot;&gt;this tutorial&lt;/a&gt; about setting it up!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://eliasdaler.files.wordpress.com/2016/05/examples_01.png?w=662&quot; alt=&quot;ImGui widgets&quot; style=&quot;display:block; margin: 0 auto;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;Different ImGui widgets (taken from ImGui’s github page)&lt;/i&gt;&lt;/p&gt;

&lt;h1 id=&quot;contents&quot;&gt;Contents&lt;/h1&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#imgui-demo-window&quot;&gt;ImGui Demo Window&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#labels&quot;&gt;Labels&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#getting-back-to-the-context-of-the-window-tree-etc&quot;&gt;Getting back to the context of the window, tree, etc.&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#inputfloatn--struct&quot;&gt;InputFloatN + struct&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#using-imgui-with-stl&quot;&gt;Using ImGui with STL&lt;/a&gt;&lt;/li&gt;  
    &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;#arrays&quot;&gt;Arrays&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#combobox-listbox&quot;&gt;ComboBox, ListBox&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#inputtext-and-stdstring&quot;&gt;InputText and std::string&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;&lt;a href=&quot;#callbacks&quot;&gt;Callbacks&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;If you didn’t read &lt;a href=&quot;https://eliasdaler.github.io/using-imgui-with-sfml-pt1&quot;&gt;the first article&lt;/a&gt;, here’s a short recap to get you started.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-github&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;a href=&quot;https://github.com/ocornut/imgui&quot;&gt;Dear ImGui&lt;/a&gt; is an amazing library which can be used to create fast GUI for your game dev (and not only!) tools in very short amount of time. The resulting code is very simple to use and modify, you don’t have to store GUI widgets or register callbacks. Here’s some stuff that I’ve made in ImGui for &lt;a href=&quot;http://en.sfml-dev.org/forums/index.php?topic=18062.0&quot;&gt;my game&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i2.wp.com/i.imgur.com/iQibpSk.gif&quot; alt=&quot;Level editor&quot; style=&quot;display:block; margin: 0 auto;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;Level Editor&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;https://i0.wp.com/i.imgur.com/A44zLlb.gif&quot; alt=&quot;Animation editor&quot; style=&quot;display:block; margin: 0 auto;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;Animation editor&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Okay, enough of intros, let’s get right to tips.&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;&lt;a class=&quot;anchor&quot; id=&quot;read-more&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;imgui-demo-window&quot;&gt;ImGui demo window&lt;/h1&gt;

&lt;p&gt;First of all, it’s very useful to check out ImGui test window and its source to see how various things can be done. You have to add &lt;strong&gt;imgui_demo.cpp&lt;/strong&gt; to your build and then call &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGui::ShowTestWindow&lt;/code&gt; to show the window. Because there are so many examples, I won’t go over them and just focus on other stuff.&lt;/p&gt;

&lt;h1 id=&quot;labels&quot;&gt;Labels&lt;/h1&gt;

&lt;p&gt;Labels are used in ImGui as unique IDs for widgets. You shouldn’t use same labels for two different widgets as it will introduce collisions between widgets and that will lead to some unwanted behavior.&lt;/p&gt;

&lt;p&gt;Suppose you have two buttons with label “Meow” and you have a code like this:&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;Meow&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cppNamespace&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppGlobalVariable&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;cppOperator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;Meow\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;Meow&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cppNamespace&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppGlobalVariable&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;cppOperator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;Purr\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;The first button works as expected, but the second doesn’t work at all! These are the things that can happen when collisions occur between IDs. This won’t happen most of the time, after all there’s mostly no need to place two buttons which say the same thing in one window. But what if you &lt;em&gt;really&lt;/em&gt; need these two “Meow” buttons? The solution is simple: you just have to add “##” and some stuff after that to resolve the collision:&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;Meow&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cppNamespace&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppGlobalVariable&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;cppOperator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;Meow\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;Meow##Second&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cppNamespace&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppGlobalVariable&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;cppOperator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;Purr\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;All the text after “##” is not displayed and only used to give unique IDs to widgets with same labels. 
IDs should be unique in the same scope, so it’s okay to have two widgets with the same label in two different windows or have one of them in some tree or list (trees, lists and some other widgets have their own scopes, so collisions won’t happen between items in them and other items).&lt;/p&gt;

&lt;p&gt;Let’s look at another situation. Suppose you have an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;s:&lt;/p&gt;
&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;cppNamespace&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType - keyword - (TRANSIENT)&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;And now you want to create a bunch of &lt;code class=&quot;highlighter-rouge&quot;&gt;InputInt&lt;/code&gt; widgets for each array element. &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGui::PushID&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;PopID&lt;/code&gt; come to the rescue! You can push &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;s, &lt;code class=&quot;highlighter-rouge&quot;&gt;const char*&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;void*&lt;/code&gt; as IDs which will be appended to the label of the next created widget (but won’t be shown). For example, you can do this:&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;PushID&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;InputInt&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;##&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;cppMemberOperator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;cppMemberOperator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;PopID&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;There are some situations where you don’t have an &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; which you can use as part of ID, for example if you want to use for-ranged loop with the &lt;code class=&quot;highlighter-rouge&quot;&gt;std::array&lt;/code&gt;. In that case, you can use pointers to elements of the array which will be unique:&lt;/p&gt;
&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;PushID&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;InputInt&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;##&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;PopID&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

&lt;h1 id=&quot;getting-back-to-the-context-of-the-window-tree-etc&quot;&gt;Getting back to the context of the window, tree, etc.&lt;/h1&gt;

&lt;p&gt;Suppose that you need to add some stuff to the window you’ve created before but you already called &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGui::End&lt;/code&gt;. No problem, just call &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGui::Begin&lt;/code&gt; with the name of the window in which you want to append stuff. Here’s an example:&lt;/p&gt;
&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;Begin&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;First window&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// begin first window&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// some stuff&lt;/span&gt;
&lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;End&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt;
 
&lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;Begin&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;Another window&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// begin second window&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// some another stuff&lt;/span&gt;
&lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;End&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt;
 
&lt;span class=&quot;comment&quot;&gt;// oops, forgot to add some stuff!&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// let&amp;#39;s go back to the context of the first window&lt;/span&gt;
&lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;Begin&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;First window&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// forgotten stuff&lt;/span&gt;
&lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;End&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt;&lt;/pre&gt;

&lt;h1 id=&quot;inputfloatn--struct&quot;&gt;InputFloatN + struct&lt;/h1&gt;

&lt;p&gt;Sometimes it’s useful to use &lt;code class=&quot;highlighter-rouge&quot;&gt;InputFloat2&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;InputFloat4&lt;/code&gt; with your point or rectangle structs which can be defined like this:&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;cppType&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;cppMemberField&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;cppMemberField&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;};&lt;/span&gt;
 
&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;cppType&quot;&gt;Rect&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;cppMemberField&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;cppMemberField&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;cppMemberField&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;cppMemberField&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;};&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Using them with &lt;code class=&quot;highlighter-rouge&quot;&gt;InputFloat2&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;InputFloat4&lt;/code&gt; is easy:&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;cppType&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.f&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.f&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;cppType&quot;&gt;Rect&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.f&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.f&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.f&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.f&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;};&lt;/span&gt;&lt;/pre&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;InputFloat2&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;Point&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;InputFloat4&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;Rect&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;This works because both &lt;code class=&quot;highlighter-rouge&quot;&gt;Point&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Rect&lt;/code&gt; structs are &lt;a href=&quot;http://en.cppreference.com/w/cpp/concept/PODType&quot;&gt;POD&lt;/a&gt; and don’t have “holes” in them, so the data they store is contiguous and can be interpreted as array of floats.&lt;/p&gt;

&lt;p&gt;This method is not very safe, of course, so use it at your own risk. Someone can modify the struct and this may break your code which assumed that the floats you want to modify are stored contiguously. Unfortunately, there’s no way to pass array of pointers to &lt;code class=&quot;highlighter-rouge&quot;&gt;InputFloat2&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;InputFloat4&lt;/code&gt;, but you can easily create your own solution. Let’s make a function which creates a widget similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;InputFloat4&lt;/code&gt; and uses members of &lt;code class=&quot;highlighter-rouge&quot;&gt;Rect&lt;/code&gt; struct explicitly:&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
 
&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;cppFunction&quot;&gt;InputRect&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppType&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;rectPtr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;decimal_precision&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppType&quot;&gt;ImGuiInputTextFlags&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;extra_flags&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;PushID&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;BeginGroup&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt;
 
    &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;valueChanged&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;cppNamespace&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType - keyword - (TRANSIENT)&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*,&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;rectPtr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;rectPtr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt;
                                  &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;rectPtr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;rectPtr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;};&lt;/span&gt;
 
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;PushID&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;PushItemWidth&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;64.f&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;cppLocalVariable&quot;&gt;valueChanged&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;InputFloat&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;##arr&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;cppParameter&quot;&gt;decimal_precision&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;extra_flags&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;PopID&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;SameLine&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;SameLine&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;TextUnformatted&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;EndGroup&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt;
 
    &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;PopID&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// pop label id;&lt;/span&gt;
 
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;valueChanged&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;And now you can do this:&lt;/p&gt;
&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;InputRect&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;Rect&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;

&lt;h1 id=&quot;using-imgui-with-stl&quot;&gt;Using ImGui with STL&lt;/h1&gt;

&lt;p&gt;There are lots of things to be said about using ImGui with STL. ImGui doesn’t use STL at all and users have to pass raw arrays and &lt;code class=&quot;highlighter-rouge&quot;&gt;const char*&lt;/code&gt;s instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;std::vector&lt;/code&gt;s and &lt;code class=&quot;highlighter-rouge&quot;&gt;std::string&lt;/code&gt;s, so you can’t just use STL and some modern C++ right away, but it can be done with some work.&lt;/p&gt;

&lt;h2 id=&quot;arrays&quot;&gt;Arrays&lt;/h2&gt;

&lt;p&gt;Some widgets require you to use raw arrays but those are not the best because you can’t use them with algorithms, for ranged loops, etc. And the other problem is that you have to manage the memory of variable size arrays yourself using &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;delete&lt;/code&gt;. Using &lt;code class=&quot;highlighter-rouge&quot;&gt;std::array&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;Imgui::InputInt4&lt;/code&gt; which expects you to pass raw array is easy, just do it like this:&lt;/p&gt;
&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;cppNamespace&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType - keyword - (TRANSIENT)&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;arr2&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;InputInt4&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;IntRect&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;arr2&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;());&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::array::data&lt;/code&gt; returns a pointer to raw int array which can be passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGui::InputInt4&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The same can be done with &lt;code class=&quot;highlighter-rouge&quot;&gt;std::vector&lt;/code&gt;s which are guaranteed to be contiguous, so you can just use &lt;code class=&quot;highlighter-rouge&quot;&gt;std::vector::data&lt;/code&gt; the same way:&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;cppNamespace&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;arr3&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;InputInt4&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;IntRect&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;arr3&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;());&lt;/span&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;combobox-listbox&quot;&gt;ComboBox, ListBox&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ComboBox&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ListBox&lt;/code&gt; can be used with arrays of &lt;code class=&quot;highlighter-rouge&quot;&gt;const char&lt;/code&gt;s, but what if you have &lt;code class=&quot;highlighter-rouge&quot;&gt;std::vector&amp;lt;std::string&amp;gt;&lt;/code&gt; instead? You have to redefine callback which ImGui calls to get next item of the array. Here’s how you can write &lt;code class=&quot;highlighter-rouge&quot;&gt;Combo&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ListBox&lt;/code&gt; wrappers for &lt;code class=&quot;highlighter-rouge&quot;&gt;std::vector&amp;lt;std::string&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;cppGlobalVariable&quot;&gt;vector_getter&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;out_text&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;vector&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;cppNamespace&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;cppNamespace&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;*&amp;gt;(&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;out_text&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;c_str&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;};&lt;/span&gt;
 
&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;cppFunction&quot;&gt;Combo&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;currIndex&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppNamespace&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;cppNamespace&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;cppFunction&quot;&gt;Combo&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;currIndex&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppGlobalVariable&quot;&gt;vector_getter&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&amp;gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;cppFunction&quot;&gt;ListBox&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;currIndex&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppNamespace&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;cppNamespace&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;cppFunction&quot;&gt;ListBox&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;currIndex&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppGlobalVariable&quot;&gt;vector_getter&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&amp;gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Ugh, that’s not the prettiest code, but it works. We store pointer to our vector in &lt;code class=&quot;highlighter-rouge&quot;&gt;void*&lt;/code&gt; and cast it back to vector in our lambda. What’s good about that code is that we don’t create any copies of strings and just use &lt;code class=&quot;highlighter-rouge&quot;&gt;const char&lt;/code&gt; pointers stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;std::string&lt;/code&gt;s from our &lt;code class=&quot;highlighter-rouge&quot;&gt;std::vector&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;inputtext-and-stdstring&quot;&gt;InputText and std::string&lt;/h2&gt;

&lt;p&gt;ImGui lets you pass char array in &lt;code class=&quot;highlighter-rouge&quot;&gt;InputText&lt;/code&gt; and then it modifies it when user enters some text in the input field. The problem is that it’s hard to know the size of input in advance, so you have to allocate large enough buffer and then pass it in &lt;code class=&quot;highlighter-rouge&quot;&gt;InputText&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can use &lt;code class=&quot;highlighter-rouge&quot;&gt;std::vector&amp;lt;char&amp;gt;&lt;/code&gt; as our buffer instead of using raw arrays. If the size of buffer is known at compile time, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;std::array&amp;lt;char, N&amp;gt;&lt;/code&gt;, where &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; is the size of the buffer.&lt;/p&gt;

&lt;p&gt;You can then create &lt;code class=&quot;highlighter-rouge&quot;&gt;std::string&lt;/code&gt; from your buffer like this:&lt;/p&gt;
&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;cppNamespace&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;One of &lt;code class=&quot;highlighter-rouge&quot;&gt;std::string&lt;/code&gt; constructors takes &lt;code class=&quot;highlighter-rouge&quot;&gt;const char*&lt;/code&gt; so we get it by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;.&lt;/p&gt;

&lt;p class=&quot;message&quot;&gt;Be careful when using &lt;code&gt;std::string&lt;/code&gt; as input buffer! Sure, you can always call &lt;code&gt;std::string::resize&lt;/code&gt; and allocate enough space, but don't use it in string handling code, because the string may contain zeros or trash and this can lead to some nasty bugs. The size of the string may not be what you expect. Moreover, when ImGui changes &lt;code&gt;std::string&lt;/code&gt;'s internal char array, it doesn't modify it's size which can be another source of hard bugs.&lt;/p&gt;

&lt;h2 id=&quot;callbacks&quot;&gt;Callbacks&lt;/h2&gt;

&lt;p&gt;ImGui lets you add callbacks to different widgets. Let’s make a silly callback which replaces all user input with char ‘A’.&lt;/p&gt;

&lt;p&gt;First you define a free function:&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;cppFunction&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;ImGuiTextEditCallbackData&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cppParameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;EventChar&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;And then pass it to &lt;code class=&quot;highlighter-rouge&quot;&gt;InputText&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;InputText&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;Text&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;textArr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;textArr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;cppEnumerator&quot;&gt;ImGuiInputTextFlags_CallbackCharFilter&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppFunction&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;You can also use stateless lambdas which can be used just as free functions:&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;InputText&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;Text&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;textArr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;textArr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;cppEnumerator&quot;&gt;ImGuiInputTextFlags_CallbackCharFilter&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;operator&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;ImGuiTextEditCallbackData&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cppParameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;EventChar&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Suppose we don’t want to hard-code replacement character and want to use a char variable instead. We can’t capture the state in our lambda (it can’t be used as a free function), so we store the pointer to char in &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGuiTextEditCallbackData::UserData&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;replacementChar&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;InputText&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;Text2&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;textArr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;textArr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;cppEnumerator&quot;&gt;ImGuiInputTextFlags_CallbackCharFilter&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;ImGuiTextEditCallbackData&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cppParameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;EventChar&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&amp;gt;(&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;UserData&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;const_cast&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&amp;gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;replacementChar&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;));&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Not bad, but capturing the state is so much prettier! And what if you wanted to pass more than one variable? This would get much harder, so I’ll show you how to use lambdas with state with ImGui!&lt;/p&gt;

&lt;p&gt;Let’s define our own function which will lets us pass lambdas with state:&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
 
&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;cppType&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;cppFunctionTemplate&quot;&gt;InputTextCool&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppType&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;buf_size&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;cppType&quot;&gt;ImGuiInputTextFlags&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;cppType&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;user_data&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;freeCallback&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;ImGuiTextEditCallbackData&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&amp;gt;(&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;UserData&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;InputText&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;buf_size&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;cppLocalVariable&quot;&gt;freeCallback&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Here’s how it works: we create another lambda which is stateless and calls our original lambda which is stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGuiTextEditCallbackData::UserData&lt;/code&gt;. And now we can pass lambda with state like this:&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunctionTemplate&quot;&gt;InputTextCool&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;Text3&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;textArr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;textArr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;cppEnumerator&quot;&gt;ImGuiInputTextFlags_CallbackCharFilter&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;[&amp;amp;&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;replacementChar&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;ImGuiTextEditCallbackData&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cppParameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;EventChar&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;replacementChar&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;});&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Nice! But we can do better, because if we want to do the same with other widgets, we have to do the same thing over and over again. So let’s generalize the approach. First of all, let’s create a function which returns stateless lambda from lambda with state:&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;cppType&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;cppFunctionTemplate&quot;&gt;getFreeCallback&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;function_traits&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;arg_t&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&amp;gt;(&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;UserData&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;This is the same approach we’ve used in &lt;code class=&quot;highlighter-rouge&quot;&gt;InputTextCool&lt;/code&gt; function. &lt;code class=&quot;highlighter-rouge&quot;&gt;function_traits&amp;lt;F&amp;gt;::arg_t&amp;lt;0&amp;gt;&lt;/code&gt; gets us the first argument of passed lambda. These traits can be defined like this:&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;cppType&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;cppClassTemplate&quot;&gt;function_traits&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;cppType&quot;&gt;function_traits&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;decltype&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;())&amp;gt;&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;{};&lt;/span&gt;
 
&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;cppType&quot;&gt;ClassType&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;cppType&quot;&gt;ReturnType&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;cppType&quot;&gt;Args&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;cppClassTemplate&quot;&gt;function_traits&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;ReturnType&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;ClassType&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::*)(&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;Args&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;...)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;cppClassTemplate&quot;&gt;arg_t&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cppNamespace&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;tuple_element_t&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppNamespace&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;Args&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;...&amp;gt;&amp;gt;;&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;And now we can do this:&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;replacementLambda&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;[&amp;amp;&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;replacementChar&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;ImGuiTextEditCallbackData&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cppParameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;EventChar&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;replacementChar&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;};&lt;/span&gt;
 
&lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;InputText&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;Text4&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;textArr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;textArr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;cppEnumerator&quot;&gt;ImGuiInputTextFlags_CallbackCharFilter&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;cppFunctionTemplate&quot;&gt;getFreeCallback&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;replacementLambda&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;replacementLambda&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;We can do the same thing “inline” like this:&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;cppType&quot;&gt;ReplacementLambdaType&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;decltype&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;replacementLambda&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;InputText&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;Text5&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;textArr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;textArr&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;cppEnumerator&quot;&gt;ImGuiInputTextFlags_CallbackCharFilter&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;ImGuiTextEditCallbackData&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;ReplacementLambdaType&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&amp;gt;(&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;UserData&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;replacementLambda&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Note that we had to store our lambda type in &lt;code class=&quot;highlighter-rouge&quot;&gt;ReplacementLambdaType&lt;/code&gt; type alias to cast from &lt;code class=&quot;highlighter-rouge&quot;&gt;void*&lt;/code&gt; later. This is almost the same as the previous approach (which I like more!).&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;ImGui is a wonderful library and it’s cool that you can easily expand it and use with all the stuff you like. There are some other tricks and tips I have to share, but this article got pretty big and so another part of this article will probably happen some day.&lt;/p&gt;

&lt;p&gt;If you want to know about something or have something to share, feel free to do it in comments, I’ll use it for the next article. See ya!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Using ImGui with SFML for creating awesome game dev tools. Part 1.</title>
   <link href="http://localhost:4000/using-imgui-with-sfml-pt1"/>
   <updated>2016-07-10T15:42:00+03:00</updated>
   <id>http://localhost:4000/imgui-sfml-pt1</id>
   <content type="html">
&lt;p&gt;Related article: &lt;a href=&quot;https://eliasdaler.github.io/using-imgui-with-sfml-pt2&quot;&gt;Using ImGui with modern C++ and STL&lt;/a&gt;
___&lt;/p&gt;

&lt;p&gt;This is the first part of tutorial about Dear ImGui (AKA ImGui) and it’ll show you how to set it up with SFML. The second part will be library agnostic and will talk about common ways of doing stuff in ImGui, some awesome widgets and some useful STL overloads.&lt;/p&gt;

&lt;p class=&quot;image-description&quot;&gt;&lt;img src=&quot;https://eliasdaler.files.wordpress.com/2016/05/examples_01.png?w=662&quot; alt=&quot;ImGui widgets&quot; class=&quot;centered-image&quot; /&gt;
Different ImGui widgets (taken from ImGui’s github page)&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Having good content creation (level editor, resource editor, etc.) and debugging tools for your game is very important and can lead to productivity and creativity boost. Here are some examples of tools I managed to make with ImGui for &lt;a href=&quot;https://eliasdaler.wordpress.com/2014/10/19/recreation-info-press-kit/&quot;&gt;my game&lt;/a&gt;:&lt;/p&gt;

&lt;p class=&quot;image-description&quot;&gt;&lt;img src=&quot;https://i.imgur.com/iQibpSk.gif&quot; alt=&quot;Level editor&quot; class=&quot;centered-image&quot; /&gt;
Level Editor&lt;/p&gt;

&lt;p class=&quot;image-description&quot;&gt;&lt;img src=&quot;https://i.imgur.com/A44zLlb.gif&quot; alt=&quot;Animation editor&quot; class=&quot;centered-image&quot; /&gt;
Animation editor&lt;/p&gt;

&lt;p class=&quot;message&quot;&gt;It was possible to add ability to change members of C++ objects with ImGui by doing some &lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt;&lt;a href=&quot;https://github.com/eliasdaler/MetaStuff&amp;quot;&amp;gt;meta template stuff&quot;&gt;meta template stuff&lt;/a&gt;, maybe I’ll write an article about that later!&lt;/p&gt;

&lt;p&gt;As you can see there’s a wide range of widgets that ImGui can provide and there are lots of other great examples of how other people use it here.&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;&lt;a class=&quot;anchor&quot; id=&quot;read-more&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;dear-imgui-and-immediate-mode-gui-concept&quot;&gt;Dear ImGui and immediate mode GUI concept&lt;/h2&gt;

&lt;p&gt;Dear ImGui is an immediate mode GUI library which makes making GUI for all kinds of tools very easy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Immediate mode GUI&lt;/strong&gt; is a bit different to what people think when they hear “GUI” (“retained mode” is a classic way of doing GUI).
Immediate mode GUI is a way of doing GUI which involves creating and drawing widgets in each frame. Widgets doesn’t hold any (or close to none) GUI state. All this stuff actually makes GUI much easier to write in lots of cases.
You don’t have to create widget instance and store it somewhere, you just call &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGui::Button&lt;/code&gt; and it will return &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; if the button is pressed. Simple as that. Note that you’ll have to call this function in each frame you want widget to be displayed and processed. At first this concept may seem weird, but shortly it all starts to make sense.&lt;/p&gt;

&lt;p&gt;For a great in-depth talk on this concept, I recommend to check out &lt;a href=&quot;https://mollyrocket.com/861&quot;&gt;Casey Muratori’s talk on IMGUI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Back to Dear ImGui. It’s:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MIT Licensed&lt;/li&gt;
  &lt;li&gt;Very fast and light&lt;/li&gt;
  &lt;li&gt;Constantly updated and expanded&lt;/li&gt;
  &lt;li&gt;Doesn’t do dynamic allocation/deallocation&lt;/li&gt;
  &lt;li&gt;Very portable – has lots of bindings for different libraries and frameworks&lt;/li&gt;
  &lt;li&gt;Easily expandable&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;setting-up&quot;&gt;Setting up&lt;/h2&gt;

&lt;p&gt;Okay, let’s begin!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use SFML to get a simple window to show up. Follow the “Getting started” tutorial &lt;a href=&quot;http://www.sfml-dev.org/tutorials/2.3/&quot;&gt;here&lt;/a&gt; if you have never done it before.&lt;/li&gt;
  &lt;li&gt;Download &lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt;&lt;a href=&quot;https://github.com/ocornut/imgui&quot;&gt;ImGui&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Download &lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt;&lt;a href=&quot;https://github.com/eliasdaler/imgui-sfml&quot;&gt;ImGui SFML binding&lt;/a&gt; and put it into ImGui folder.&lt;/p&gt;

    &lt;p class=&quot;message&quot;&gt;&lt;strong&gt;Important&lt;/strong&gt;: you have to add the contents of &lt;strong&gt;imconfig-SFML.h&lt;/strong&gt; to ImGui’s &lt;strong&gt;imconfig.h&lt;/strong&gt; to get implicit &lt;code class=&quot;highlighter-rouge&quot;&gt;ImVec2&lt;/code&gt; &lt;i class=&quot;fa fa-arrows-h&quot;&gt;&lt;/i&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;sf::Vector2f&lt;/code&gt; conversion working!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Add ImGui folder to your include directories.&lt;/li&gt;
  &lt;li&gt;Add these files to your build / project:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;imgui.cpp&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;imgui_draw.cpp&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;imgui-SFML.cpp&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;imgui_demo.cpp&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;(Optional) If you get linking errors, link OpenGL to your project.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here’s a complete example of using ImGui and SMFL together.&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;preprocessor keyword&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;imgui.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;preprocessor keyword&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;imgui-sfml.h&amp;quot;&lt;/span&gt;
 
&lt;span class=&quot;preprocessor keyword&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;SFML/Graphics/RenderWindow.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&quot;preprocessor keyword&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;SFML/System/Clock.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&quot;preprocessor keyword&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;SFML/Window/Event.hpp&amp;gt;&lt;/span&gt;
 
&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;cppFunction&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cppNamespace&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;RenderWindow&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppNamespace&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;VideoMode&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;640&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;480&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cppLocalVariable&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;setVerticalSyncEnabled&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppNamespace&quot;&gt;SFML&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
 
    &lt;span class=&quot;cppNamespace&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;bgColor&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.f&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.f&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.f&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;};&lt;/span&gt;
 
    &lt;span class=&quot;comment&quot;&gt;// let&amp;#39;s use char array as buffer, see next part&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// for instructions on using std::string with ImGui&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;windowTitle&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;ImGui + SFML = &amp;lt;3&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;cppLocalVariable&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;windowTitle&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cppLocalVariable&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;resetGLStates&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// call it if you only draw ImGui. Otherwise not needed.&lt;/span&gt;
    &lt;span class=&quot;cppNamespace&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;Clock&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;deltaClock&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;isOpen&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cppNamespace&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;Event&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;pollEvent&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppNamespace&quot;&gt;SFML&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;ProcessEvent&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
 
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;cppNamespace&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppEnumerator&quot;&gt;Closed&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cppLocalVariable&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
 
        &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppNamespace&quot;&gt;SFML&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;deltaClock&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;());&lt;/span&gt;
 
        &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;Begin&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;Sample window&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// begin window&lt;/span&gt;
 
                                       &lt;span class=&quot;comment&quot;&gt;// Background color edit&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;ColorEdit3&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;Background color&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;comment&quot;&gt;// this code gets called if color value changes, so&lt;/span&gt;
            &lt;span class=&quot;comment&quot;&gt;// the background color is upgraded automatically!&lt;/span&gt;
            &lt;span class=&quot;cppLocalVariable&quot;&gt;bgColor&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;cppNamespace&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;Uint8&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;255.f&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;cppLocalVariable&quot;&gt;bgColor&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;cppNamespace&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;Uint8&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;255.f&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;cppLocalVariable&quot;&gt;bgColor&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;cppNamespace&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;Uint8&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;255.f&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
 
        &lt;span class=&quot;comment&quot;&gt;// Window title text edit&lt;/span&gt;
        &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;InputText&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;Window title&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;windowTitle&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
 
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;Update window title&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;comment&quot;&gt;// this code gets if user clicks on the button&lt;/span&gt;
            &lt;span class=&quot;comment&quot;&gt;// yes, you could have written if(ImGui::InputText(...))&lt;/span&gt;
            &lt;span class=&quot;comment&quot;&gt;// but I do this to show how buttons work :)&lt;/span&gt;
            &lt;span class=&quot;cppLocalVariable&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;windowTitle&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;End&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// end window&lt;/span&gt;
 
        &lt;span class=&quot;cppLocalVariable&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;bgColor&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// fill background with color&lt;/span&gt;
        &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;Render&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;cppLocalVariable&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;cppNamespace&quot;&gt;ImGui&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppNamespace&quot;&gt;SFML&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;Shutdown&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;You’ll see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://eliasdaler.files.wordpress.com/2016/05/tlkdyng.png?w=662&quot; alt=&quot;First example &quot; class=&quot;centered-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Try to change some stuff. Double click on r/g/b field to set values precisely, or just drag some widgets to change window’s background color. Press the button to change window title.
Here, it works!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://eliasdaler.files.wordpress.com/2016/05/q7bxj94.png?w=6622&quot; alt=&quot;First example &quot; class=&quot;centered-image&quot; /&gt;
Awesome! Now let’s see how it works.&lt;/p&gt;

&lt;p&gt;ImGui is initialized by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGui::SFML::Init&lt;/code&gt; function to which you pass your &lt;code class=&quot;highlighter-rouge&quot;&gt;sf::RenderWindow&lt;/code&gt;. If you use window and want to use another &lt;code class=&quot;highlighter-rouge&quot;&gt;sf::RenderTarget&lt;/code&gt; for drawing, you can do this by passing window as first argument and &lt;code class=&quot;highlighter-rouge&quot;&gt;sf::RenderTarget&lt;/code&gt; as the second. ImGui-SFML internally creates a font atlas, but if you want to create and manage it yourself, you can pass sf::Texture pointer when you call Init. You can create default font atlas by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGui::SFML::createFontTexture&lt;/code&gt; and passing your sf::Texture in it.&lt;/p&gt;

&lt;p&gt;Shutting down is done with &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGui::SFML::Shutdown&lt;/code&gt; call which cleans some things up. (Deleting internal font atlas, if it’s used, for example).&lt;/p&gt;

&lt;p&gt;There are two phases of using ImGui in your game loop: &lt;em&gt;update&lt;/em&gt; and &lt;em&gt;render&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updating&lt;/strong&gt; consists of &lt;em&gt;event processing&lt;/em&gt;, &lt;em&gt;state update&lt;/em&gt; and &lt;em&gt;widget update&lt;/em&gt;. Event processing is done by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGui::SFML::ProcessEvent&lt;/code&gt; and it’s almost the same as processing SFML events. State update (which is being done by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGui::SFML::Update&lt;/code&gt;) updates delta time which ImGui uses internally, so you have to pass it using your delta time clock, as well as mouse coordinates. &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGui::NewFrame&lt;/code&gt; is also being called here and you can call ImGui widget creation functions after that. Calling stuff like &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGui::Button&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGui::Color3Edit&lt;/code&gt; updates widgets and it also generates one draw list which is used for rendering later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Drawing&lt;/strong&gt; is done with &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGui::Render()&lt;/code&gt; call.&lt;/p&gt;

&lt;p class=&quot;message&quot;&gt;You must create all widgets between &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGui::SFML::Update()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGui::Render()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you’re updating more than you draw, then you have two options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Update ImGui once per render frame&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Update ImGui more than once per render frame&lt;/strong&gt; (helps for low FPS because with &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGui::Update&lt;/code&gt; and all widget calls you can still process your input if you have to update for several times without rendering). There’s one difference: you have to call &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGui::EndFrame()&lt;/code&gt; after each update iteration. The problem with this approach is that all widgets still generate render lists even if you don’t draw them which may impact performance (but I’ve never noticed any slowdowns due to ImGui). The issue is currently being addressed and hopefully we’ll get separation from drawing and updating soon.&lt;/li&gt;
&lt;/ol&gt;

&lt;p class=&quot;message&quot;&gt;&lt;strong&gt;Important&lt;/strong&gt;: if you only draw ImGui stuff, don’t forget to call &lt;code class=&quot;highlighter-rouge&quot;&gt;window.resetGLStates()&lt;/code&gt; before you render anything. SFML does it for you, if you draw SFML stuff before drawing ImGui, so it’s not needed in this case.&lt;/p&gt;

&lt;p&gt;Widgets are easily created by calling corresponding functions (more about them in the next part). For example, you can call &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGui::InputInt&lt;/code&gt; and pass a pointer to int there.When you change widget’s value, the integer is changed too.
Buttons work pretty easy too – they don’t need callbacks, you just wrap code which you want to call after the button is pressed in &lt;code class=&quot;highlighter-rouge&quot;&gt;if(ImGui::Button(…)) { … }&lt;/code&gt; and that’s all you have to do.&lt;/p&gt;

&lt;p&gt;Call &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGui::ShowTestWindow&lt;/code&gt; somewhere when you create widgets and you’ll get a nice window with lots of examples of ImGui stuff. This is very useful as example of how to do stuff with ImGui. Just look for the thing you want to make in this test window and you’ll easily find how to do it in corresponding part of imgui_demo.cpp.&lt;/p&gt;

&lt;h2 id=&quot;useful-overloads-for-sfml&quot;&gt;Useful overloads for SFML&lt;/h2&gt;

&lt;p&gt;There are also some useful overloads implemented in SFML ImGui binding. For example, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGui::Image&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ImGui::ImageButton&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;sf::Textures&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sf::Sprites&lt;/code&gt;! I’ve also defined implicit conversions between &lt;code class=&quot;highlighter-rouge&quot;&gt;ImVec2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sf::Vector2f&lt;/code&gt;, so you can pass &lt;code class=&quot;highlighter-rouge&quot;&gt;sf::Vector2f&lt;/code&gt; to ImGui’s functions without needing to cast explicitly.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As you can see, using ImGui is easy and it’s easy to start doing really impressive and useful stuff with it right away. Thank you for reading this tutorial, I hope it was useful and that ImGui will help you make better tools and greater games as the result of having awesome tools. :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Improving code highlighting on blogs</title>
   <link href="http://localhost:4000/better-highlighting"/>
   <updated>2016-07-10T15:42:00+03:00</updated>
   <id>http://localhost:4000/highlight-test</id>
   <content type="html">&lt;p&gt;Who knew that I’ll someday write about web programming, but here I am.&lt;/p&gt;

&lt;p class=&quot;message&quot;&gt;This advice applies to lots of languages and editors, I use C++ and Visual Studio as an example.&lt;/p&gt;

&lt;p&gt;Lots of sites use &lt;strong&gt;Pygments&lt;/strong&gt; or &lt;strong&gt;highlight.js&lt;/strong&gt; as a syntax highlighter and here’s how C++ code highlighted in &lt;strong&gt;Pygments&lt;/strong&gt; looks (&lt;strong&gt;highlight.js&lt;/strong&gt; produces almost identical output):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LuaScriptManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loadScript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOrArgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_gettop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine_system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;luaL_loadfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_pcall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOrArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MessageType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lua&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Loaded script: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// some error
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MessageType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lua_Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Failed to load: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MessageType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lua_Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_tostring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lua_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// pop error message from stack
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But here’s what you can do with Visual Studio by copying HTML markup from it and applying some CSS:&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;cppType&quot;&gt;LuaScriptManager&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;loadScript&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;cppNamespace&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;numberOrArgs&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cppFunction&quot;&gt;lua_gettop&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cppGlobalVariable&quot;&gt;engine_system&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;LogManager&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;(!(&lt;/span&gt;&lt;span class=&quot;cppMacro&quot;&gt;luaL_loadfile&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;c_str&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;cppMacro&quot;&gt;lua_pcall&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;numberOrArgs&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cppLocalVariable&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;cppMemberOperator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;LogManager&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;MessageType&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppEnumerator&quot;&gt;Lua&lt;/span&gt;&lt;span class=&quot;cppMemberOperator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cppMemberOperator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;Loaded script: &amp;quot;&lt;/span&gt; &lt;span class=&quot;cppMemberOperator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// some error&lt;/span&gt;
        &lt;span class=&quot;cppLocalVariable&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;cppMemberOperator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;LogManager&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;MessageType&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppEnumerator&quot;&gt;Lua_Exception&lt;/span&gt;&lt;span class=&quot;cppMemberOperator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cppMemberOperator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;Failed to load: &amp;quot;&lt;/span&gt; &lt;span class=&quot;cppMemberOperator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cppLocalVariable&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;cppMemberOperator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;LogManager&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;MessageType&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppEnumerator&quot;&gt;Lua_Exception&lt;/span&gt;&lt;span class=&quot;cppMemberOperator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cppMemberOperator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;cppMacro&quot;&gt;lua_tostring&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;cppMacro&quot;&gt;lua_pop&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// pop error message from stack&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;That’s so much better&lt;/strong&gt;. Let’s see how it works and why it’s much more detailed.&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;&lt;a class=&quot;anchor&quot; id=&quot;read-more&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;

&lt;p&gt;Here’s stuff that is highlighted here and doesn’t get highlighted in Pygments:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Classes&lt;/li&gt;
  &lt;li&gt;Parameters&lt;/li&gt;
  &lt;li&gt;Macros&lt;/li&gt;
  &lt;li&gt;Enum values&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you set up the color theme in Visual Studio, you can highlight much more stuff:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Namespaces&lt;/li&gt;
  &lt;li&gt;Local variables&lt;/li&gt;
  &lt;li&gt;Member variables&lt;/li&gt;
  &lt;li&gt;Member functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;… and much more!&lt;/p&gt;

&lt;p&gt;Why? That’s because highlighters like &lt;strong&gt;Pygments&lt;/strong&gt;, &lt;strong&gt;highlight.js&lt;/strong&gt; highlight using syntax rules. This may be enough for easier languages like HTML, CSS or others, but this isn’t enough for languages as C++ where meanings of tokens are needed for detailed highlighting.&lt;/p&gt;

&lt;p&gt;Visual Studio can highlight classes, enum variables, macros etc. because it pre-compiles the code in your project and knows what different tokens mean. So let’s use all that info.&lt;/p&gt;

&lt;p class=&quot;message&quot;&gt;You don't have to use Visual Studio for this, I'm just showing this method which can be useful for people who already do. If you use other IDEs/editors, find out if they support copying HTML markup of your code and use that instead.&lt;/p&gt;

&lt;h2 id=&quot;copying-html-markup&quot;&gt;Copying HTML markup&lt;/h2&gt;

&lt;p&gt;Let’s see how better highlighting can be achieved.&lt;/p&gt;

&lt;p&gt;First of all, you have to install &lt;a href=&quot;https://visualstudiogallery.msdn.microsoft.com/d0d33361-18e2-46c0-8ff2-4adea1e34fef&quot;&gt;Productivity Power Tools&lt;/a&gt;. In &lt;strong&gt;Options, Productivity Power Tools, HTML Copy&lt;/strong&gt; you need to set &lt;strong&gt;EmitSpanClass&lt;/strong&gt; to &lt;strong&gt;true&lt;/strong&gt; and &lt;strong&gt;EmitSpanStyle&lt;/strong&gt; to &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here’s a function signature for example:&lt;/p&gt;

&lt;pre class=&quot;vs-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;cppType&quot;&gt;LuaScriptManager&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;loadScript&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;cppNamespace&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Copying markup from Visual Studio gets you this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;pre&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vs-code&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;keyword&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;bool&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cppType - identifier - (TRANSIENT)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;LuaScriptManager&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;operator&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;::&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cppMemberFunction - identifier - (TRANSIENT)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;loadScript&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;operator&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;(&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;keyword&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;const&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cppNamespace - identifier - (TRANSIENT)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;std&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;operator&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;::&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cppType - identifier - (TRANSIENT)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;string&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;operator&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cppParameter - identifier - (TRANSIENT)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;filename&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;operator&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By default Productivity Power tools adds stuff like background color, font, etc. but you can configure it to generate &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;pre class=&quot;vs-code&quot;&amp;gt;&lt;/code&gt; in the beginning (this selector will be shown later).&lt;/p&gt;

&lt;p&gt;Things like “- identifier - (TRANSIENT)” inside &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&lt;/code&gt; elements can be safely removed. Let’s see what we got, here’s one of the generated &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&lt;/code&gt; elements:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cppParameter&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;filename&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, the semantic meaning of &lt;code class=&quot;highlighter-rouge&quot;&gt;filename&lt;/code&gt; is not lost! We still know that it’s a function parameter and we can highlight it properly.&lt;/p&gt;

&lt;h2 id=&quot;setting-css&quot;&gt;Setting CSS&lt;/h2&gt;

&lt;p&gt;Using CSS we can define &lt;code class=&quot;highlighter-rouge&quot;&gt;vs-code&lt;/code&gt; like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.vs-code&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Consolas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#dfdfbf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#2c2c2c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* etc. */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And now we can define different colors for different C++ tokens:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.vs-code&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.comment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#7a987a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.vs-code&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.keyword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#efc986&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.vs-code&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.cppMacro&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#bd63c5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.vs-code&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#6e96be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.vs-code&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.operator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#dfdfbf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.vs-code&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.cppType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#8acccf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* etc. */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And that’s it! Enjoy more detailed highlighting and make your articles more readable with it.&lt;/p&gt;

&lt;p&gt;Thank you for reading, hope you find this method useful!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CppCast: Talking about Lua and C++ in game development</title>
   <link href="http://localhost:4000/cppcast"/>
   <updated>2016-07-09T01:50:00+03:00</updated>
   <id>http://localhost:4000/cppcast</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/cppcast.jpg&quot; alt=&quot;Me on CppCast&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I recently gave an interview on &lt;strong&gt;CppCast&lt;/strong&gt;!
Listen to it &lt;a href=&quot;http://cppcast.com/2016/07/elias-daler&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are my some thoughts about CppCast and the episode.
&lt;!--more--&gt;&lt;a class=&quot;anchor&quot; id=&quot;read-more&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;about-cppcast&quot;&gt;About CppCast&lt;/h2&gt;

&lt;p&gt;If you’re never heard of &lt;strong&gt;CppCast&lt;/strong&gt; before - it’s one of the most amazing podcasts ever! The guests are always interesting and the discussions are very informative. The hosts know what to ask and what to talk about - they’re C++ developers themselves.
They also get awesome guests on the show. For example, there are episodes with people like &lt;a href=&quot;http://cppcast.com/2015/09/scott-meyers/&quot;&gt;Scott Meyers&lt;/a&gt;, &lt;a href=&quot;http://cppcast.com/2015/10/andrei-alexandrescu/&quot;&gt;Andrei Alexandrescu&lt;/a&gt; and &lt;a href=&quot;http://cppcast.com/2016/06/herb-sutter/&quot;&gt;Herb Sutter&lt;/a&gt;. These people are my heroes of programming, so it’s a big pleasure to be interviewed on the podcast of that caliber.&lt;/p&gt;

&lt;h2 id=&quot;episode-with-me&quot;&gt;Episode with me&lt;/h2&gt;

&lt;p&gt;I’ve never expected to be on the show so soon. I’ve joked about it: “Ah, I’ll be there in &lt;em&gt;X&lt;/em&gt; years when I get really successful”. It’s a big honor for me and I’m very thankful for Rob and Jason for making my dream of being on podcast come true.&lt;/p&gt;

&lt;p&gt;I’m sorry if I come of kinda derpy or awkward at times during the interview. First of all, I was pretty nervous and secondly, English is not my native language and I don’t speak in it in real life at all. 
But still, I think I did pretty well and we discussed lots of neat stuff during the episode.&lt;/p&gt;

&lt;h2 id=&quot;if-you-want-to-learn-about-luac-integration-andor-read-my-other-blog-posts&quot;&gt;If you want to learn about Lua/C++ integration and/or read my other blog posts&lt;/h2&gt;

&lt;p&gt;This is my new blog, so check out my &lt;a href=&quot;https://eliasdaler.wordpress.com&quot;&gt;old blog&lt;/a&gt; for all the mentioned articles. If you want to start with Lua and C++, check out &lt;a href=&quot;https://eliasdaler.wordpress.com/2014/07/18/using-lua-with-cpp-luabridge/&quot;&gt;LuaBridge tutorial&lt;/a&gt; (though I recommend to use &lt;a href=&quot;https://github.com/ThePhD/sol2&quot;&gt;sol2&lt;/a&gt; as a binding library). If you want to see how you can use Lua in Practice, check out &lt;a href=&quot;https://eliasdaler.wordpress.com/2015/08/10/using-lua-and-cpp-in-practice/&quot;&gt;Using Lua in practice&lt;/a&gt; articles (there are five of them!). And check out &lt;a href=&quot;https://eliasdaler.wordpress.com/tag/dev-log/&quot;&gt;Re:creation dev logs&lt;/a&gt; for in-depth explanation of what I did about the game and how I make my game engine.&lt;/p&gt;

&lt;p&gt;The new articles are coming very soon, check out what I’m planning to write &lt;a href=&quot;https://eliasdaler.github.io/first-post&quot;&gt;here&lt;/a&gt; (I promised that there’ll be some when the podcast airs, but I didn’t think that episode will come out so soon, so sorry about that). I think these articles will be even better, there’s a lot of things I’ve learned during the last few years.&lt;/p&gt;

&lt;p&gt;Thanks for reading and listening. Please let me know what you thought of the episode in the comments!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New blog, new articles!</title>
   <link href="http://localhost:4000/first-post"/>
   <updated>2016-07-07T14:50:20+03:00</updated>
   <id>http://localhost:4000/first-post</id>
   <content type="html">&lt;p&gt;Hello and welcome to my new blog!
After using my &lt;a href=&quot;https://eliasdaler.wordpress.com/&quot;&gt;old blog&lt;/a&gt; for several years, I’ve decided that it’s time to move on. This blog is made with &lt;strong&gt;Jekyll&lt;/strong&gt; and it’s currently hosted at &lt;strong&gt;GitHub&lt;/strong&gt;, though eventually I plan to register proper domain for my site once I feel that the blog is good enough.&lt;/p&gt;

&lt;p&gt;I feel that having a minimalist blog with great customization is awesome and it will improve looks of my blog posts a lot. Just look at that beautiful code block, that’s how the code will look from now on:&lt;/p&gt;

&lt;p&gt;In Pygments:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;componentName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ScriptDataLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;componentManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine_system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ComponentManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;componentType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;componentManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getTypeIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;componentName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;componentType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine_system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MessageType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;: Component with type &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;componentName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;already exists.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;componentManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;componentType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;componentManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loadFromLua&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;componentType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;addComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;componentType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And this is a test of HTML markup from Visual Studio!&lt;/p&gt;
&lt;pre class=&quot;vs-code&quot;&gt;
&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;cppType&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;addComponent&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;cppNamespace&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;componentName&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;cppType&quot;&gt;ScriptDataLoader&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;
{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;componentManager&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cppGlobalVariable&quot;&gt;engine_system&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;ComponentManager&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;componentType&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;componentManager&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;getTypeIndex&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppParameter&quot;&gt;componentName&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;hasComponent&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;componentType&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cppGlobalVariable&quot;&gt;engine_system&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;LogManager&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;cppLocalVariable&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;cppMemberOperator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;LogManager&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppType&quot;&gt;MessageType&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppEnumerator&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;cppMemberOperator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cppMemberOperator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;cppMemberField&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;cppMemberOperator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;: Component with type &amp;quot;&lt;/span&gt; &lt;span class=&quot;cppMemberOperator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;componentName&lt;/span&gt; &lt;span class=&quot;cppMemberOperator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;already exists.&amp;quot;&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cppLocalVariable&quot;&gt;componentManager&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;createComponent&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;componentType&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cppLocalVariable&quot;&gt;componentManager&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;loadFromLua&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;componentType&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppMemberOperator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppMemberField&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppParameter&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cppLocalVariable&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;cppMemberOperator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;cppMemberField&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cppLocalVariable&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;cppMemberOperator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;cppMemberFunction&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;cppMemberFunction&quot;&gt;addComponent&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;componentType&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cppNamespace&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;cppFunction&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cppLocalVariable&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;There are some new articles coming soon and will be published on this blog, but first, let’s talk about it.&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;&lt;a class=&quot;anchor&quot; id=&quot;read-more&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-i-created-a-new-blog&quot;&gt;Why I created a new blog&lt;/h2&gt;

&lt;p&gt;There were several reasons for that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Not much customization was available&lt;/strong&gt;. I was using free version of Wordpress which limited me with what I can do about the site. I wasn’t very happy about most of the free themes on the site and the one I was using was the best one for me, but there were still some small problems with it which I wanted to fix but wasn’t able to.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Wordpress liked breaking my code&lt;/strong&gt;. It kept inserting &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;lt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;gt;&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; and stuff like that. No matter what I’ve tried, it always ended up doing it, even if the code was inside &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;code&amp;gt;&lt;/code&gt; tags! It was really awful and even a small fix in the article was hard to make because of that.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;No Lua highlighting&lt;/strong&gt;. There was no support for Lua and for guy who writes so much about Lua it was really hard. I ended up using Python highlighting for most Lua code blocks but it wasn’t perfect.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Disqus&lt;/strong&gt;. I like Disqus very much, it’s better than Wordpress comment system and allows more people to comment on my articles.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Source control&lt;/strong&gt;. While Wordpress has source control system, it’s easier for me to use git for that. It wasn’t possible with free Wordpress account, of course.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;… and there are some other small reasons but I’ll stop at that.&lt;/p&gt;

&lt;h2 id=&quot;future-plans&quot;&gt;Future plans&lt;/h2&gt;

&lt;p&gt;There are several articles I plan to write and they’ll be published on this blog from now on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Using ImGui (with SFML) Part Two&lt;/strong&gt;. This article will show some notable things about ImGui: some useful things, some hacks and tips about using it with modern C++ and STL.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;How I use modern C++&lt;/strong&gt;. In this article I’ll show how I use modern C++ while developing my game and how it makes my code more readable and safer. I’ll also address some myths about modern C++ which are mostly result of ignorance or false claims coming from “C with classes” programmers.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Using Lua with C++ series reboot&lt;/strong&gt;. Yeah, it’s coming! Let’s talk a bit more about it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;using-lua-with-c-reboot&quot;&gt;Using Lua with C++ reboot&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/lua-logo.png&quot; alt=&quot;Lua logo&quot; style=&quot;display: block;margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I wrote the first Lua/C++ articles almost three years ago! This was my first article which got really big and inspired me to continue writing lots of articles devoted to Lua and C++ integration.&lt;/p&gt;

&lt;p&gt;And now I feel like I need to re-write the tutorial series from the ground up because I’ve learned a lot during the last three years. I’ve also received lots of e-mails with different questions about Lua and C++ and I’ve noticed some things which need to be addressed and explained in detail.&lt;/p&gt;

&lt;p&gt;The series will start with me explaining why Lua is awesome and how it can be used in game development. I’ll start with explaining some things about how Lua works internally and how you can use Lua C API to interact with it. While there are some amazing Lua/C++ bindings out there, I feel that understanding how Lua and Lua C API work is very important and useful for using Lua efficiently.&lt;/p&gt;

&lt;p&gt;After some basic discussion the series will move on to practical examples of how I use Lua while developing &lt;strong&gt;Re:creation&lt;/strong&gt;. During years of using Lua I’ve discovered some useful scripting patterns which will be explained in these articles.&lt;/p&gt;

&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;Thank you for your feedback about all my articles! As I’m writing new articles, please tell me what you want to see in Lua/C++ or modern C++ articles. Your opinion is very important to me and I’ll try to answer your questions about different stuff in my new articles. See you soon!&lt;/p&gt;
</content>
 </entry>
 

</feed>
